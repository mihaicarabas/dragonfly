.\" Copyright (c) 2000 Jeroen Ruigrok van der Werven
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\" $FreeBSD: src/share/man/man9/BUS_SETUP_INTR.9,v 1.20 2007/03/01 14:33:29 ru Exp $
.\"
.Dd September 7, 2012
.Dt BUS_SETUP_INTR 9
.Os
.Sh NAME
.Nm BUS_SETUP_INTR ,
.Nm bus_setup_intr ,
.Nm bus_setup_intr_descr ,
.Nm BUS_TEARDOWN_INTR ,
.Nm bus_teardown_intr
.Nd create, attach and teardown an interrupt handler
.Sh SYNOPSIS
.In sys/param.h
.In sys/bus.h
.Ft int
.Fo BUS_SETUP_INTR
.Fa "device_t dev" "device_t child" "struct resource *irq" "int flags"
.Fa "driver_intr_t *intr" "void *arg" "void **cookiep"
.Fa "lwkt_serialize_t serializer" "const char *desc"
.Fc
.Ft int
.Fo bus_setup_intr
.Fa "device_t dev" "struct resource *r" "int flags" "driver_intr_t handler"
.Fa "void *arg" "void **cookiep" "lwkt_serialize_t serializer"
.Fc
.Ft int
.Fo bus_setup_intr_descr
.Fa "device_t dev" "struct resource *r" "int flags" "driver_intr_t handler"
.Fa "void *arg" "void **cookiep" "lwkt_serialize_t serializer"
.Fa "const char *desc"
.Fc
.Ft int
.Fo BUS_TEARDOWN_INTR
.Fa "device_t dev" "device_t child" "struct resource *irq" "void *cookie"
.Fc
.Ft int
.Fn bus_teardown_intr "device_t dev" "struct resource *r" "void *cookie"
.Sh DESCRIPTION
The
.Fn BUS_SETUP_INTR
method
will create and attach an interrupt handler to an interrupt
previously allocated by the resource manager's
.Xr BUS_ALLOC_RESOURCE 9
method.
The defined handler
will be called with the value
.Fa arg
as its only argument.
.Pp
The
.Fa cookiep
argument is a pointer to a
.Vt "void *"
that
.Fn BUS_SETUP_INTR
will write a cookie for the parent bus' use to if it is successful in
establishing an interrupt.
Driver writers may assume that this cookie will be non-zero.
The nexus driver will write 0 on failure to
.Fa cookiep .
.Pp
The
.Fa flags
are found in
.In sys/bus.h
and tell the interrupt handlers about certain
device driver characteristics and are typically either
.Li 0
or
.Dv INTR_MPSAFE .
If
.Dv INTR_MPSAFE
is specified the kernel is free to call the interrupt handler without
holding the MP lock.
.Dv INTR_FAST
is also sometimes specified and allows the
interrupt handler to be directly called from the context of the thread
being interrupted, but is not recommended for most drivers.
Other interrupt flags exist for special purposes.
.Pp
If
.Fa serializer
is non-NULL the interrupt handler will be called with the serializer held.
The serializer replaces the obsolete SPL calls that are no longer relevant on
SMP systems.
Driver code can obtain the same serializer to interlock against
the driver interrupt.
The serializer also has enablement and disablement
features which mainline driver code can use to avoid races between interrupt
disablement and delayed interrupts executing from the device's interrupt
thread.
.Pp
.Fa desc
can be used to describe the interrupt handler, which is particularly useful
for devices that use multiple interrupts. If it is NULL, the device name
will be used instead.
.Pp
The interrupt handler will be detached by
.Fn BUS_TEARDOWN_INTR .
The
.Fa cookie
needs to be passed to
.Fn BUS_TEARDOWN_INTR
in order to tear down the correct interrupt handler.
Once
.Fn BUS_TEARDOWN_INTR
returns, it is guaranteed that the interrupt function is not active and
will no longer be called.
.Pp
The lowercase versions
.Fn bus_setup_intr ,
.Fn bus_setup_intr_descr
and
.Fn bus_teardown_intr
are convenience functions to make it easier for drivers to use the
resource-management functions.
All they do is hide indirection through the parent's method table,
making for slightly less wordy code.
.Sh RETURN VALUES
Zero is returned on success,
otherwise an appropriate error is returned.
.Sh SEE ALSO
.Xr device 9 ,
.Xr driver 9 ,
.Xr serializer 9
.Sh AUTHORS
.An -nosplit
This manual page was written by
.An Jeroen Ruigrok van der Werven Aq Mt asmodai@FreeBSD.org
based on the manual pages for
.Fn BUS_CREATE_INTR
and
.Fn BUS_CONNECT_INTR
written by
.An Doug Rabson Aq Mt dfr@FreeBSD.org .
